#!/usr/bin/python3
import json
import os
import sys


def storageMigrate(storage):
    if storage.get('type') == 'hostPath':
        if not storage.get('hostPath'):
            return storage

        hostPath = storage['hostPath']
        storage['hostPathConfig'] = { 'hostPath': hostPath }
        del storage['hostPath']

    if storage.get('type') == 'ixVolume':
        if not storage.get('datasetName'):
            return storage

        datasetName = storage['datasetName']
        storage['ixVolumeConfig'] = { 'datasetName': datasetName }
        del storage['datasetName']

    return storage



def migrate(values):
    storageKey = 'searxngStorage'
    storages = ['config']


    for storage in storages:
        check_val = values.get(storageKey, {}).get(storage, {})
        if not isinstance(check_val, dict) or not check_val:
            continue

        values[storageKey][storage] = storageMigrate(check_val)


    additionalStorages = values.get(storageKey, {}).get('additionalStorages', {})
    for storage in additionalStorages:
        check_val = additionalStorages[storage]
        if not isinstance(check_val, dict) or not check_val:
            continue

        additionalStorages[storage] = storageMigrate(check_val)

    values[storageKey]['additionalStorages'] = additionalStorages


    return values


if __name__ == '__main__':
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], 'r') as f:
            print(json.dumps(migrate(json.loads(f.read()))))
